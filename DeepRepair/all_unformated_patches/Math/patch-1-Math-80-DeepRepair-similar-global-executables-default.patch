--- /local/scr/mtufano/Math/80/b/similar-global-executables-default/1/AstorMain-b/src/default/org/apache/commons/math/linear/EigenDecompositionImpl.java	
+++ /local/scr/mtufano/Math/80/b/similar-global-executables-default/1/AstorMain-b/src/variant-193/org/apache/commons/math/linear/EigenDecompositionImpl.java	
@@ -678,7 +678,7 @@
 			for (int i = 0; i < j; i += 4) {
 				for (int k = 0; k < 4; k += step) {
 					final double tmp = work[(i + k)];
-					work[(i + k)] = work[(j - k)];
+					cachedV = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(n, n);
 					work[(j - k)] = tmp;
 				}
 				j -= 4;
@@ -884,6 +884,7 @@
 			if ((((org.apache.commons.math.util.MathUtils.SAFE_MIN) * (work[(j4p2 + 2)])) < (work[(j4 - 2)])) && (((org.apache.commons.math.util.MathUtils.SAFE_MIN) * (work[(j4 - 2)])) < (work[(j4p2 + 2)]))) {
 				final double tmp = (work[(j4p2 + 2)]) / (work[(j4 - 2)]);
 				work[j4] = (work[j4p2]) * tmp;
+				eMin = work[(((4 * start) + (pingPong)) + 4)];
 				dN = (dN1) * tmp;
 			}else {
 				work[j4] = (work[(j4p2 + 2)]) * ((work[j4p2]) / (work[(j4 - 2)]));

--- /local/scr/mtufano/Math/80/b/similar-global-executables-default/1/AstorMain-b/src/default/org/apache/commons/math/linear/EigenDecompositionImpl.java	
+++ /local/scr/mtufano/Math/80/b/similar-global-executables-default/1/AstorMain-b/src/variant-193/org/apache/commons/math/linear/EigenDecompositionImpl.java	
@@ -678,7 +678,7 @@
 			for (int i = 0; i < j; i += 4) {
 				for (int k = 0; k < 4; k += step) {
 					final double tmp = work[(i + k)];
-					work[(i + k)] = work[(j - k)];
+					cachedV = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(n, n);
 					work[(j - k)] = tmp;
 				}
 				j -= 4;
@@ -884,6 +884,7 @@
 			if ((((org.apache.commons.math.util.MathUtils.SAFE_MIN) * (work[(j4p2 + 2)])) < (work[(j4 - 2)])) && (((org.apache.commons.math.util.MathUtils.SAFE_MIN) * (work[(j4 - 2)])) < (work[(j4p2 + 2)]))) {
 				final double tmp = (work[(j4p2 + 2)]) / (work[(j4 - 2)]);
 				work[j4] = (work[j4p2]) * tmp;
+				eMin = work[(((4 * start) + (pingPong)) + 4)];
 				dN = (dN1) * tmp;
 			}else {
 				work[j4] = (work[(j4p2 + 2)]) * ((work[j4p2]) / (work[(j4 - 2)]));