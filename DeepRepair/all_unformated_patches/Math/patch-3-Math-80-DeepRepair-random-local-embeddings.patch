--- /local/scr/mtufano/Math/80/b/random-local-embeddings/2/AstorMain-b/src/default/org/apache/commons/math/linear/EigenDecompositionImpl.java	
+++ /local/scr/mtufano/Math/80/b/random-local-embeddings/2/AstorMain-b/src/variant-424/org/apache/commons/math/linear/EigenDecompositionImpl.java	
@@ -694,6 +694,7 @@
 		double lower = java.lang.Double.POSITIVE_INFINITY;
 		double upper = java.lang.Double.NEGATIVE_INFINITY;
 		for (int i = 0; i < n; ++i) {
+			pingPong = n / 4;
 			lower = java.lang.Math.min(lower, work[((lowerStart + index) + i)]);
 			upper = java.lang.Math.max(upper, work[((upperStart + index) + i)]);
 		}
@@ -948,6 +949,7 @@
 							if ((work[(np - 4)]) > (work[(np - 2)])) {
 								return ;
 							}
+							eMin = work[(((4 * start) + (pingPong)) + 4)];
 							a2 = (work[(np - 4)]) / (work[(np - 2)]);
 							if ((work[(nn - 9)]) > (work[(nn - 11)])) {
 								return ;

--- /local/scr/mtufano/Math/80/b/random-local-embeddings/2/AstorMain-b/src/default/org/apache/commons/math/linear/EigenDecompositionImpl.java	
+++ /local/scr/mtufano/Math/80/b/random-local-embeddings/2/AstorMain-b/src/variant-424/org/apache/commons/math/linear/EigenDecompositionImpl.java	
@@ -694,6 +694,7 @@
 		double lower = java.lang.Double.POSITIVE_INFINITY;
 		double upper = java.lang.Double.NEGATIVE_INFINITY;
 		for (int i = 0; i < n; ++i) {
+			pingPong = n / 4;
 			lower = java.lang.Math.min(lower, work[((lowerStart + index) + i)]);
 			upper = java.lang.Math.max(upper, work[((upperStart + index) + i)]);
 		}
@@ -948,6 +949,7 @@
 							if ((work[(np - 4)]) > (work[(np - 2)])) {
 								return ;
 							}
+							eMin = work[(((4 * start) + (pingPong)) + 4)];
 							a2 = (work[(np - 4)]) / (work[(np - 2)]);
 							if ((work[(nn - 9)]) > (work[(nn - 11)])) {
 								return ;