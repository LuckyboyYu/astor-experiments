{
    "buggyStatement": "if (p == 1.0) {\n\treturn upper;\n}\nfixed statement= if ((p < 0.0) || (p > 1.0)) {\n\tthrow new org.apache.commons.math3.exception.OutOfRangeException(p, 0, 1);\n}\ngeneration= 1\ningredientScope= LOCAL\noperation: ReplaceOp\nlocation= org.apache.commons.math3.distribution.AbstractIntegerDistribution\nline= 137\nlineSuspiciousness= 0.577\noriginal statement= if (tmp < upper) {\n\tupper = ((int) (java.lang.Math.ceil(tmp))) - 1;\n}",
    "diffpatch": "--- /local/scr/mtufano/Math/2/b/similar-package-types-default/1/AstorMain-b/src/default/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t\n+++ /local/scr/mtufano/Math/2/b/similar-package-types-default/1/AstorMain-b/src/variant-707/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t\n@@ -43,8 +43,8 @@\n \t\t\tlower -= 1;\n \t\t}\n \t\tint upper = getSupportUpperBound();\n-\t\tif (p == 1.0) {\n-\t\t\treturn upper;\n+\t\tif ((p < 0.0) || (p > 1.0)) {\n+\t\t\tthrow new org.apache.commons.math3.exception.OutOfRangeException(p, 0, 1);\n \t\t}\n \t\tfinal double mu = getNumericalMean();\n \t\tfinal double sigma = org.apache.commons.math3.util.FastMath.sqrt(getNumericalVariance());\n@@ -57,8 +57,8 @@\n \t\t\t}\n \t\t\tk = 1.0 / k;\n \t\t\ttmp = mu + (k * sigma);\n-\t\t\tif (tmp < upper) {\n-\t\t\t\tupper = ((int) (java.lang.Math.ceil(tmp))) - 1;\n+\t\t\tif (p == 1.0) {\n+\t\t\t\treturn upper;\n \t\t\t}\n \t\t}\n \t\treturn solveInverseCumulativeProbability(p, lower, upper);\n\n--- /local/scr/mtufano/Math/2/b/similar-package-types-default/1/AstorMain-b/src/default/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t\n+++ /local/scr/mtufano/Math/2/b/similar-package-types-default/1/AstorMain-b/src/variant-707/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java\t\n@@ -43,8 +43,8 @@\n \t\t\tlower -= 1;\n \t\t}\n \t\tint upper = getSupportUpperBound();\n-\t\tif (p == 1.0) {\n-\t\t\treturn upper;\n+\t\tif ((p < 0.0) || (p > 1.0)) {\n+\t\t\tthrow new org.apache.commons.math3.exception.OutOfRangeException(p, 0, 1);\n \t\t}\n \t\tfinal double mu = getNumericalMean();\n \t\tfinal double sigma = org.apache.commons.math3.util.FastMath.sqrt(getNumericalVariance());\n@@ -57,8 +57,8 @@\n \t\t\t}\n \t\t\tk = 1.0 / k;\n \t\t\ttmp = mu + (k * sigma);\n-\t\t\tif (tmp < upper) {\n-\t\t\t\tupper = ((int) (java.lang.Math.ceil(tmp))) - 1;\n+\t\t\tif (p == 1.0) {\n+\t\t\t\treturn upper;\n \t\t\t}\n \t\t}\n \t\treturn solveInverseCumulativeProbability(p, lower, upper);",
    "generation": 1,
    "ingredients": null,
    "patch": "if ((p < 0.0) || (p > 1.0)) {\n\tthrow new org.apache.commons.math3.exception.OutOfRangeException(p, 0, 1);\n}\ngeneration= 1\ningredientScope= LOCAL\noperation: ReplaceOp\nlocation= org.apache.commons.math3.distribution.AbstractIntegerDistribution\nline= 137\nlineSuspiciousness= 0.577\noriginal statement= if (tmp < upper) {\n\tupper = ((int) (java.lang.Math.ceil(tmp))) - 1;\n}\nfixed statement= if (p == 1.0) {\n\treturn upper;\n}",
    "patchLocation": {
        "className": "org.apache.commons.math3.distribution.AbstractIntegerDistribution",
        "line": 119,
        "lineSuspiciousness": 0.378
    },
    "scope": "LOCAL",
    "time": "4556",
    "type": "ReplaceOp",
    "variant": 707
}