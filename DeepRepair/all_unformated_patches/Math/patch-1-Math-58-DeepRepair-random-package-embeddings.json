{
    "buggyStatement": "work1[j] = 0",
    "diffpatch": "--- /local/scr/mtufano/Math/58/b/random-package-embeddings/3/AstorMain-b/src/default/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\t\n+++ /local/scr/mtufano/Math/58/b/random-package-embeddings/3/AstorMain-b/src/variant-329/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java\t\n@@ -153,6 +153,13 @@\n \t\t\t\tfor (int j = 0; j < (solvedCols); ++j) {\n \t\t\t\t\tint pj = permutation[j];\n \t\t\t\t\tdouble dirJ = lmDir[pj];\n+\t\t\t\t\tif (lmNorm > 0) {\n+\t\t\t\t\t\tpreviousCost = org.apache.commons.math.util.FastMath.max(previousCost, lmPar);\n+\t\t\t\t\t}else\n+\t\t\t\t\t\tif (lmNorm < 0) {\n+\t\t\t\t\t\t\tpreviousCost = org.apache.commons.math.util.FastMath.min(previousCost, lmPar);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\n \t\t\t\t\twork1[j] = 0;\n \t\t\t\t\tfor (int i = 0; i <= j; ++i) {\n \t\t\t\t\t\twork1[i] += (weightedResidualJacobian[i][pj]) * dirJ;",
    "generation": 328,
    "ingredients": null,
    "patch": "if (lmNorm > 0) {\n\tpreviousCost = org.apache.commons.math.util.FastMath.max(previousCost, lmPar);\n}else\n\tif (lmNorm < 0) {\n\t\tpreviousCost = org.apache.commons.math.util.FastMath.min(previousCost, lmPar);\n\t}\n",
    "patchLocation": {
        "className": "org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer",
        "line": 364,
        "lineSuspiciousness": 0.408
    },
    "scope": "LOCAL",
    "time": "7937",
    "type": "InsertBeforeOp",
    "variant": 329
}