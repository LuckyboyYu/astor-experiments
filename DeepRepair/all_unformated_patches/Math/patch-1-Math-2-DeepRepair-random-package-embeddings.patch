--- /local/scr/mtufano/Math/2/b/random-package-embeddings/1/AstorMain-b/src/default/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java	
+++ /local/scr/mtufano/Math/2/b/random-package-embeddings/1/AstorMain-b/src/variant-280/org/apache/commons/math3/distribution/AbstractIntegerDistribution.java	
@@ -49,17 +49,12 @@
 		final double mu = getNumericalMean();
 		final double sigma = org.apache.commons.math3.util.FastMath.sqrt(getNumericalVariance());
 		final boolean chebyshevApplies = !(((((java.lang.Double.isInfinite(mu)) || (java.lang.Double.isNaN(mu))) || (java.lang.Double.isInfinite(sigma))) || (java.lang.Double.isNaN(sigma))) || (sigma == 0.0));
-		if (chebyshevApplies) {
-			double k = org.apache.commons.math3.util.FastMath.sqrt(((1.0 - p) / p));
-			double tmp = mu - (k * sigma);
-			if (tmp > lower) {
-				lower = ((int) (java.lang.Math.ceil(tmp))) - 1;
-			}
-			k = 1.0 / k;
-			tmp = mu + (k * sigma);
-			if (tmp < upper) {
-				upper = ((int) (java.lang.Math.ceil(tmp))) - 1;
+		if (lower == (java.lang.Integer.MIN_VALUE)) {
+			if ((checkedCumulativeProbability(lower)) >= p) {
+				return lower;
 			}
+		}else {
+			lower -= 1;
 		}
 		return solveInverseCumulativeProbability(p, lower, upper);
 	}