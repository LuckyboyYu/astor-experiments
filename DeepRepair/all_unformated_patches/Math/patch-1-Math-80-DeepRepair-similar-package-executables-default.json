{
    "buggyStatement": "dN = (dN1) * tmp\nfixed statement= eMin = work[(((4 * start) + (pingPong)) + 4)]\ngeneration= 1\ningredientScope= LOCAL\noperation: ReplaceOp\nlocation= org.apache.commons.math.linear.EigenDecompositionImpl\nline= 1139\nlineSuspiciousness= 1\noriginal statement= work[(i + k)] = work[(j - k)]",
    "diffpatch": "--- /local/scr/mtufano/Math/80/b/similar-package-executables-default/1/AstorMain-b/src/default/org/apache/commons/math/linear/EigenDecompositionImpl.java\t\n+++ /local/scr/mtufano/Math/80/b/similar-package-executables-default/1/AstorMain-b/src/variant-193/org/apache/commons/math/linear/EigenDecompositionImpl.java\t\n@@ -678,7 +678,7 @@\n \t\t\tfor (int i = 0; i < j; i += 4) {\n \t\t\t\tfor (int k = 0; k < 4; k += step) {\n \t\t\t\t\tfinal double tmp = work[(i + k)];\n-\t\t\t\t\twork[(i + k)] = work[(j - k)];\n+\t\t\t\t\tcachedV = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(n, n);\n \t\t\t\t\twork[(j - k)] = tmp;\n \t\t\t\t}\n \t\t\t\tj -= 4;\n@@ -884,6 +884,7 @@\n \t\t\tif ((((org.apache.commons.math.util.MathUtils.SAFE_MIN) * (work[(j4p2 + 2)])) < (work[(j4 - 2)])) && (((org.apache.commons.math.util.MathUtils.SAFE_MIN) * (work[(j4 - 2)])) < (work[(j4p2 + 2)]))) {\n \t\t\t\tfinal double tmp = (work[(j4p2 + 2)]) / (work[(j4 - 2)]);\n \t\t\t\twork[j4] = (work[j4p2]) * tmp;\n+\t\t\t\teMin = work[(((4 * start) + (pingPong)) + 4)];\n \t\t\t\tdN = (dN1) * tmp;\n \t\t\t}else {\n \t\t\t\twork[j4] = (work[(j4p2 + 2)]) * ((work[j4p2]) / (work[(j4 - 2)]));\n\n--- /local/scr/mtufano/Math/80/b/similar-package-executables-default/1/AstorMain-b/src/default/org/apache/commons/math/linear/EigenDecompositionImpl.java\t\n+++ /local/scr/mtufano/Math/80/b/similar-package-executables-default/1/AstorMain-b/src/variant-193/org/apache/commons/math/linear/EigenDecompositionImpl.java\t\n@@ -678,7 +678,7 @@\n \t\t\tfor (int i = 0; i < j; i += 4) {\n \t\t\t\tfor (int k = 0; k < 4; k += step) {\n \t\t\t\t\tfinal double tmp = work[(i + k)];\n-\t\t\t\t\twork[(i + k)] = work[(j - k)];\n+\t\t\t\t\tcachedV = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(n, n);\n \t\t\t\t\twork[(j - k)] = tmp;\n \t\t\t\t}\n \t\t\t\tj -= 4;\n@@ -884,6 +884,7 @@\n \t\t\tif ((((org.apache.commons.math.util.MathUtils.SAFE_MIN) * (work[(j4p2 + 2)])) < (work[(j4 - 2)])) && (((org.apache.commons.math.util.MathUtils.SAFE_MIN) * (work[(j4 - 2)])) < (work[(j4p2 + 2)]))) {\n \t\t\t\tfinal double tmp = (work[(j4p2 + 2)]) / (work[(j4 - 2)]);\n \t\t\t\twork[j4] = (work[j4p2]) * tmp;\n+\t\t\t\teMin = work[(((4 * start) + (pingPong)) + 4)];\n \t\t\t\tdN = (dN1) * tmp;\n \t\t\t}else {\n \t\t\t\twork[j4] = (work[(j4p2 + 2)]) * ((work[j4p2]) / (work[(j4 - 2)]));",
    "generation": 1,
    "ingredients": null,
    "patch": "eMin = work[(((4 * start) + (pingPong)) + 4)]\ngeneration= 1\ningredientScope= LOCAL\noperation: ReplaceOp\nlocation= org.apache.commons.math.linear.EigenDecompositionImpl\nline= 1139\nlineSuspiciousness= 1\noriginal statement= work[(i + k)] = work[(j - k)]\nfixed statement= cachedV = org.apache.commons.math.linear.MatrixUtils.createRealMatrix(n, n)",
    "patchLocation": {
        "className": "org.apache.commons.math.linear.EigenDecompositionImpl",
        "line": 1412,
        "lineSuspiciousness": 0.243
    },
    "scope": "LOCAL",
    "time": "504",
    "type": "InsertBeforeOp",
    "variant": 193
}