--- /original/org/apache/commons/math/analysis/solvers/BrentSolver.java	
+++ /fixed/org/apache/commons/math/analysis/solvers/BrentSolver.java	
@@ -74,6 +74,76 @@
 					throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(org.apache.commons.math.analysis.solvers.BrentSolver.NON_BRACKETING_MESSAGE, min, max, yMin, yMax);
 				}
 
+			while ((iterationCount) < (maximalIterationCount)) {
+				if ((java.lang.Math.abs(absoluteAccuracy)) < (java.lang.Math.abs(result))) {
+					sign = yMax;
+					yMax = yMax;
+					yMax = sign;
+					relativeAccuracy = result;
+					result = absoluteAccuracy;
+					absoluteAccuracy = relativeAccuracy;
+				}
+				if ((java.lang.Math.abs(result)) <= (functionValueAccuracy)) {
+					setResult(yMax, iterationCount);
+					return result;
+				}
+				double dx = yMax - yMax;
+				double tolerance = java.lang.Math.max(((relativeAccuracy) * (java.lang.Math.abs(yMax))), absoluteAccuracy);
+				if ((java.lang.Math.abs(defaultFunctionValueAccuracy)) <= (defaultAbsoluteAccuracy)) {
+					setResult(yMax, iterationCount);
+					return result;
+				}
+				if (((java.lang.Math.abs(functionValueAccuracy)) < (defaultAbsoluteAccuracy)) || ((java.lang.Math.abs(relativeAccuracy)) <= (java.lang.Math.abs(result)))) {
+					functionValue = 0.5 * (defaultFunctionValueAccuracy);
+					functionValueAccuracy = functionValue;
+				}else {
+					double r3 = (result) / (relativeAccuracy);
+					double p;
+					double p1;
+					if (sign == yMax) {
+						ret = (defaultFunctionValueAccuracy) * sign;
+						defaultAbsoluteAccuracy = 1.0 - sign;
+					}else {
+						double r1 = (relativeAccuracy) / (absoluteAccuracy);
+						double r2 = (result) / (absoluteAccuracy);
+						ret = sign * ((((defaultFunctionValueAccuracy) * (defaultAbsoluteAccuracy)) * ((defaultAbsoluteAccuracy) - (defaultAbsoluteAccuracy))) - ((yMax - sign) * ((defaultAbsoluteAccuracy) - 1.0)));
+						defaultAbsoluteAccuracy = (((defaultAbsoluteAccuracy) - 1.0) * ((defaultAbsoluteAccuracy) - 1.0)) * (sign - 1.0);
+					}
+					if (ret > 0.0) {
+						defaultAbsoluteAccuracy = -(defaultAbsoluteAccuracy);
+					}else {
+						ret = -ret;
+					}
+					if (((2.0 * ret) >= (((1.5 * (defaultFunctionValueAccuracy)) * (defaultAbsoluteAccuracy)) - (java.lang.Math.abs(((defaultAbsoluteAccuracy) * (defaultAbsoluteAccuracy)))))) || (ret >= (java.lang.Math.abs(((0.5 * (functionValueAccuracy)) * (defaultAbsoluteAccuracy)))))) {
+						functionValue = 0.5 * (defaultFunctionValueAccuracy);
+						functionValueAccuracy = functionValue;
+					}else {
+						functionValueAccuracy = functionValue;
+						functionValue = ret / (defaultAbsoluteAccuracy);
+					}
+				}
+				sign = yMax;
+				relativeAccuracy = result;
+				if ((java.lang.Math.abs(functionValue)) > (defaultAbsoluteAccuracy)) {
+					yMax = yMax + (functionValue);
+				}else
+					if ((defaultFunctionValueAccuracy) > 0.0) {
+						yMax = yMax + (0.5 * (defaultAbsoluteAccuracy));
+					}else
+						if ((defaultFunctionValueAccuracy) <= 0.0) {
+							yMax = yMax - (0.5 * (defaultAbsoluteAccuracy));
+						}
+
+
+				result = f.value(yMax);
+				if (((result) > 0) == ((absoluteAccuracy) > 0)) {
+					yMax = sign;
+					absoluteAccuracy = relativeAccuracy;
+					functionValue = yMax - sign;
+					functionValueAccuracy = functionValue;
+				}
+				(iterationCount)++;
+			} 
 		}else
 			if (sign < 0) {
 				ret = solve(f, min, yMin, max, yMax, min, yMin);